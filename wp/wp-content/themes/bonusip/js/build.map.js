{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "inc/import.js",
    "src/js/native/main.js"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "require('../src/js/native/main.js');\n",
    "\"use strict\";\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  //\tобщие переменные\n  var html = document.documentElement;\n  var imagesForLoad = $('.js-image-load');\n  var mqmd = '(min-width: 768px)';\n  var mq = window.matchMedia(mqmd); // навигация\n\n  var navbar = $('.navbar');\n  var navbarNav = $('.navbar-nav');\n  var scrollToElem = $('.js-scroll');\n  var navbarCollapse = $('#navbar-collapse'); // фиксированные кнопки внизу экрана\n\n  var tel = $('.tel');\n  var up = $('.up'); //\tпеременные для анимаций по скроллу\n\n  var addClass = 'animate-go';\n  var animateBlind = 'animate-blind'; // класс активации шторки на элементах\n\n  var blind = $('.blind'); // элементы со шторкой\n\n  var circle = $('.circle');\n  var line = $('.level__line'); // переменные для яндекс карт\n\n  var ym = $('#map-yandex'); // показ бэкграунда из data атрибутов data-big, data-small (jQuery)\n\n  function loadImage(str, match, elem) {\n    function eventWin(e) {\n      if (e.matches) {\n        elem.each(function (i, el) {\n          var item = $(el);\n          item.css('background-image', \"url(\".concat(item.data('big'), \")\"));\n        });\n      } else {\n        elem.each(function (i, el) {\n          var item = $(el);\n          item.css('background-image', \"url(\".concat(item.data('small'), \")\"));\n        });\n      }\n    }\n\n    eventWin(match);\n    match.addListener(eventWin);\n  }\n  /**\n  * Получение координат дом элемента относительно документа\n  *\t@param {object} elem DOM элемент\n  *\t@return {object} свойства top, left внутри\n  */\n\n\n  function getCoords(elem) {\n    var box = elem.getBoundingClientRect();\n    return {\n      top: box.top + pageYOffset,\n      left: box.left + pageXOffset\n    };\n  }\n  /**\n  * Функция анимации\n  * @param {object}\n  * \t@param {number} duration Общее время, которое должна длиться анимация, в мс.\n  * \t@param {founction} timing(timeFraction) временная функция\n  * \tзначение по умолчанию:\n  * \tfunction linear(timeFraction) {\n  * \t\treturn timeFraction;\n  * \t}\n  * \t@param {founction} draw(progress) основная функция анимации\n  */\n\n\n  function animate(options) {\n    var start = performance.now();\n    requestAnimationFrame(function animate(time) {\n      var progress; // timeFraction от 0 до 1\n\n      var timeFraction = (time - start) / options.duration;\n      if (timeFraction > 1) timeFraction = 1; // текущее состояние анимации\n\n      progress = options.timing ? options.timing(timeFraction) : timeFraction;\n      if (progress > 0) options.draw(progress);\n\n      if (timeFraction < 1) {\n        requestAnimationFrame(animate);\n      }\n    });\n  }\n  /**\n  * jQuery\n  * выполнение действий с элементом при скролле\n  *\t@param {array} arr\n  *\t\t@param {obj}\n  *\t\t\t@param {object} elems jQuery массив элементов\n  *\t\t\t@param {array} status пустой массив для отслеживания статуса вкл выкл\n  *\t\t\t@param {number} position расстояние до появления эл-та\n  *\t\t\t@param {callback} show действие при показе эл-та\n  *\t \t\t@param {callback} hide действие при исчезании эл-та\n  */\n\n\n  function scrollAnimate(arr) {\n    $(window).scroll(function () {\n      var scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      var scroll = scrollTop + $(this).height();\n      var hide = false;\n\n      var _loop = function _loop(i) {\n        var position = arr[i].position || 0;\n        if (arr[i].hide) hide = arr[i].hide.bind(arr[i]);\n        arr[i].elems.each(function (o, val) {\n          var pos = $(val).offset().top;\n\n          if (pos < scroll - position) {\n            arr[i].show(o, val);\n          } else {\n            if (hide) hide(o, val);\n          }\n        });\n      };\n\n      for (var i = 0; i < arr.length; i++) {\n        _loop(i);\n      }\n    });\n  } // обработка кликов по навигационным элементам\n\n\n  scrollToElem.on('click', function (e) {\n    var href = $(e.target).attr('href');\n    var coord = getCoords(document.querySelector(href)).top - 100;\n    var scroll = pageYOffset || html.scrollTop;\n    animate({\n      duration: 500,\n      draw: function draw(p) {\n        var progress;\n        if (scroll === coord) return false;\n\n        if (scroll - coord > 0) {\n          progress = Math.floor(scroll - scroll * p);\n          progress > coord ? scrollTo(0, progress) : scrollTo(0, coord);\n        } else {\n          var step = coord - scroll;\n          progress = Math.floor(scroll + step * p);\n          progress < coord ? scrollTo(0, progress) : scrollTo(0, coord);\n        }\n      }\n    });\n    navbarCollapse.collapse('hide');\n    e.preventDefault();\n  });\n  loadImage(mqmd, mq, imagesForLoad); // вызов анимации при скролле на элементы, параметром передается массив с объектами\n\n  scrollAnimate([// активация анимаций на блоках\n  {\n    elems: blind,\n    scroll: false,\n    show: function show(i, elem) {\n      $(elem).addClass(animateBlind);\n    },\n    hide: function hide(i, elem) {\n      $(elem).removeClass(animateBlind);\n    }\n  }, // скрытие меню\n  {\n    elems: navbar,\n    scroll: false,\n    show: function show(i, elem) {\n      var scrollTop = window.pageYOffset || html.scrollTop;\n\n      if (this.scroll > scrollTop) {\n        $(elem).removeClass(addClass);\n      } else if (scrollTop > 300) {\n        $(elem).addClass(addClass);\n        navbarCollapse.collapse('hide');\n      }\n\n      this.scroll = scrollTop;\n    }\n  }, // безопасность\n  {\n    elems: line,\n    status: [],\n    show: function show(i, elem) {\n      if (!this.status[i]) {\n        var data = $(elem).data('width');\n        animate({\n          duration: 2000,\n          draw: function draw(progress) {\n            var pr = Math.round(progress * data);\n            $(elem).css('width', \"\".concat(pr, \"%\")).find('span').text(\"\".concat(pr, \"%\"));\n          }\n        });\n        this.status[i] = true;\n      }\n    },\n    hide: function hide(i, elem) {\n      $(elem).css('width', '').find('span').text('0%');\n      this.status[i] = false;\n    }\n  }, // svg круги со статистикой\n  {\n    elems: circle,\n    status: false,\n    show: function show(i, elem) {\n      if (!this.status) {\n        $(elem).addClass(addClass);\n        animate({\n          duration: 3000,\n          draw: function draw(progress) {\n            $(elem).find('text').each(function (i, v) {\n              var val = $(v).data('num');\n              $(v).text(Math.round(progress * val));\n            });\n          }\n        });\n        this.status = true;\n      }\n    },\n    hide: function hide(i, elem) {\n      $(elem).removeClass(addClass);\n      $(elem).find('text').text('');\n      this.status = false;\n    }\n  }]); //\tвопросы. событие раскрытия.\n\n  $('.questions__collapse').on('show.bs.collapse', function () {\n    var id = $(this).attr('id');\n    $(\".arrow[href=\\\"#\".concat(id, \"\\\"]\")).addClass('arrow_active');\n  });\n  $('.questions__collapse').on('hide.bs.collapse', function () {\n    var id = $(this).attr('id');\n    $(\".arrow[href=\\\"#\".concat(id, \"\\\"]\")).removeClass('arrow_active');\n  }); // скролл в начало страницы по кнопке\n\n  up.on('click', function (e) {\n    var scrollTop = window.pageYOffset || html.scrollTop;\n    animate({\n      duration: 500,\n      draw: function draw(p) {\n        var progress = Math.floor(scrollTop - scrollTop * p);\n        progress ? window.scrollTo(0, progress) : window.scrollTo(0, 0);\n      }\n    });\n  }); // подгрузка Яндекс карт при наведении\n  //Переменная для включения/отключения индикатора загрузки\n\n  var spinner = $('.ymap-container .loader'); //Переменная для определения была ли хоть раз загружена Яндекс.Карта (чтобы избежать повторной загрузки при наведении)\n\n  var check_if_load = false; //Необходимые переменные для того, чтобы задать координаты на Яндекс.Карте\n\n  var myMapTemp, myPlacemarkTemp; //Функция создания карты сайта и затем вставки ее в блок с идентификатором &#34;map-yandex&#34;\n\n  function init() {\n    var myMapTemp = new ymaps.Map(\"map-yandex\", {\n      center: [+ym.data('centerx'), +ym.data('centery')],\n      // координаты центра на карте\n      zoom: +ym.data('zoom'),\n      // коэффициент приближения карты\n      controls: ['zoomControl', 'fullscreenControl'] // выбираем только те функции, которые необходимы при использовании\n\n    });\n    var myPlacemarkTemp = new ymaps.GeoObject({\n      geometry: {\n        type: \"Point\",\n        coordinates: [+ym.data('flagx'), +ym.data('flagy')] // координаты, где будет размещаться флажок на карте\n\n      }\n    });\n    myMapTemp.geoObjects.add(myPlacemarkTemp); // помещаем флажок на карту\n    // Получаем первый экземпляр коллекции слоев, потом первый слой коллекции\n\n    var layer = myMapTemp.layers.get(0).get(0); // Решение по callback-у для определения полной загрузки карты\n\n    waitForTilesLoad(layer).then(function () {\n      // Скрываем индикатор загрузки после полной загрузки карты\n      spinner.removeClass('is-active');\n    });\n  } // Функция для определения полной загрузки карты (на самом деле проверяется загрузка тайлов) \n\n\n  function waitForTilesLoad(layer) {\n    return new ymaps.vow.Promise(function (resolve, reject) {\n      var tc = getTileContainer(layer),\n          readyAll = true;\n      tc.tiles.each(function (tile, number) {\n        if (!tile.isReady()) {\n          readyAll = false;\n        }\n      });\n\n      if (readyAll) {\n        resolve();\n      } else {\n        tc.events.once(\"ready\", function () {\n          resolve();\n        });\n      }\n    });\n  }\n\n  function getTileContainer(layer) {\n    for (var k in layer) {\n      if (layer.hasOwnProperty(k)) {\n        if (layer[k] instanceof ymaps.layer.tileContainer.CanvasContainer || layer[k] instanceof ymaps.layer.tileContainer.DomContainer) {\n          return layer[k];\n        }\n      }\n    }\n\n    return null;\n  } // Функция загрузки API Яндекс.Карт по требованию (в нашем случае при наведении)\n\n\n  function loadScript(url, callback) {\n    var script = document.createElement(\"script\");\n\n    if (script.readyState) {\n      // IE\n      script.onreadystatechange = function () {\n        if (script.readyState == \"loaded\" || script.readyState == \"complete\") {\n          script.onreadystatechange = null;\n          callback();\n        }\n      };\n    } else {\n      // Другие браузеры\n      script.onload = function () {\n        callback();\n      };\n    }\n\n    script.src = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n  } // Основная функция, которая проверяет когда мы навели на блок с классом &#34;ymap-container&#34;\n\n\n  var ymap = function ymap() {\n    $('.ymap-container').mouseenter(function () {\n      if (!check_if_load) {\n        // проверяем первый ли раз загружается Яндекс.Карта, если да, то загружаем\n        // Чтобы не было повторной загрузки карты, мы изменяем значение переменной\n        check_if_load = true; // Показываем индикатор загрузки до тех пор, пока карта не загрузится\n\n        spinner.addClass('is-active'); // Загружаем API Яндекс.Карт\n\n        loadScript(\"https://api-maps.yandex.ru/2.1/?lang=ru_RU&amp;loadByRequire=1\", function () {\n          // Как только API Яндекс.Карт загрузились, сразу формируем карту и помещаем в блок с идентификатором &#34;map-yandex&#34;\n          ymaps.load(init);\n        });\n      }\n    });\n  };\n\n  $(function () {\n    //Запускаем основную функцию\n    ymap();\n  });\n});"
  ]
}